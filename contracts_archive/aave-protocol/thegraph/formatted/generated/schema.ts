// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class LendingPoolConfigurationHistoryItem extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save LendingPoolConfigurationHistoryItem entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save LendingPoolConfigurationHistoryItem entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("LendingPoolConfigurationHistoryItem", id.toString(), this);
  }

  static load(id: string): LendingPoolConfigurationHistoryItem | null {
    return store.get(
      "LendingPoolConfigurationHistoryItem",
      id
    ) as LendingPoolConfigurationHistoryItem | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get provider(): string {
    let value = this.get("provider");
    return value.toString();
  }

  set provider(value: string) {
    this.set("provider", Value.fromString(value));
  }

  get lendingPool(): Bytes | null {
    let value = this.get("lendingPool");
    if (value === null) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set lendingPool(value: Bytes | null) {
    if (value === null) {
      this.unset("lendingPool");
    } else {
      this.set("lendingPool", Value.fromBytes(value as Bytes));
    }
  }

  get lendingPoolCore(): Bytes | null {
    let value = this.get("lendingPoolCore");
    if (value === null) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set lendingPoolCore(value: Bytes | null) {
    if (value === null) {
      this.unset("lendingPoolCore");
    } else {
      this.set("lendingPoolCore", Value.fromBytes(value as Bytes));
    }
  }

  get lendingPoolParametersProvider(): Bytes | null {
    let value = this.get("lendingPoolParametersProvider");
    if (value === null) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set lendingPoolParametersProvider(value: Bytes | null) {
    if (value === null) {
      this.unset("lendingPoolParametersProvider");
    } else {
      this.set(
        "lendingPoolParametersProvider",
        Value.fromBytes(value as Bytes)
      );
    }
  }

  get lendingPoolManager(): Bytes | null {
    let value = this.get("lendingPoolManager");
    if (value === null) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set lendingPoolManager(value: Bytes | null) {
    if (value === null) {
      this.unset("lendingPoolManager");
    } else {
      this.set("lendingPoolManager", Value.fromBytes(value as Bytes));
    }
  }

  get lendingPoolConfigurator(): Bytes | null {
    let value = this.get("lendingPoolConfigurator");
    if (value === null) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set lendingPoolConfigurator(value: Bytes | null) {
    if (value === null) {
      this.unset("lendingPoolConfigurator");
    } else {
      this.set("lendingPoolConfigurator", Value.fromBytes(value as Bytes));
    }
  }

  get lendingPoolLiquidationManager(): Bytes | null {
    let value = this.get("lendingPoolLiquidationManager");
    if (value === null) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set lendingPoolLiquidationManager(value: Bytes | null) {
    if (value === null) {
      this.unset("lendingPoolLiquidationManager");
    } else {
      this.set(
        "lendingPoolLiquidationManager",
        Value.fromBytes(value as Bytes)
      );
    }
  }

  get lendingPoolDataProvider(): Bytes | null {
    let value = this.get("lendingPoolDataProvider");
    if (value === null) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set lendingPoolDataProvider(value: Bytes | null) {
    if (value === null) {
      this.unset("lendingPoolDataProvider");
    } else {
      this.set("lendingPoolDataProvider", Value.fromBytes(value as Bytes));
    }
  }

  get proxyPriceProvider(): Bytes | null {
    let value = this.get("proxyPriceProvider");
    if (value === null) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set proxyPriceProvider(value: Bytes | null) {
    if (value === null) {
      this.unset("proxyPriceProvider");
    } else {
      this.set("proxyPriceProvider", Value.fromBytes(value as Bytes));
    }
  }

  get lendingRateOracle(): Bytes | null {
    let value = this.get("lendingRateOracle");
    if (value === null) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set lendingRateOracle(value: Bytes | null) {
    if (value === null) {
      this.unset("lendingRateOracle");
    } else {
      this.set("lendingRateOracle", Value.fromBytes(value as Bytes));
    }
  }

  get feeProvider(): Bytes | null {
    let value = this.get("feeProvider");
    if (value === null) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set feeProvider(value: Bytes | null) {
    if (value === null) {
      this.unset("feeProvider");
    } else {
      this.set("feeProvider", Value.fromBytes(value as Bytes));
    }
  }

  get timestamp(): i32 {
    let value = this.get("timestamp");
    return value.toI32();
  }

  set timestamp(value: i32) {
    this.set("timestamp", Value.fromI32(value));
  }
}

export class LendingPoolConfiguration extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save LendingPoolConfiguration entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save LendingPoolConfiguration entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("LendingPoolConfiguration", id.toString(), this);
  }

  static load(id: string): LendingPoolConfiguration | null {
    return store.get(
      "LendingPoolConfiguration",
      id
    ) as LendingPoolConfiguration | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get lendingPool(): Bytes | null {
    let value = this.get("lendingPool");
    if (value === null) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set lendingPool(value: Bytes | null) {
    if (value === null) {
      this.unset("lendingPool");
    } else {
      this.set("lendingPool", Value.fromBytes(value as Bytes));
    }
  }

  get lendingPoolCore(): Bytes | null {
    let value = this.get("lendingPoolCore");
    if (value === null) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set lendingPoolCore(value: Bytes | null) {
    if (value === null) {
      this.unset("lendingPoolCore");
    } else {
      this.set("lendingPoolCore", Value.fromBytes(value as Bytes));
    }
  }

  get lendingPoolParametersProvider(): Bytes | null {
    let value = this.get("lendingPoolParametersProvider");
    if (value === null) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set lendingPoolParametersProvider(value: Bytes | null) {
    if (value === null) {
      this.unset("lendingPoolParametersProvider");
    } else {
      this.set(
        "lendingPoolParametersProvider",
        Value.fromBytes(value as Bytes)
      );
    }
  }

  get lendingPoolManager(): Bytes | null {
    let value = this.get("lendingPoolManager");
    if (value === null) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set lendingPoolManager(value: Bytes | null) {
    if (value === null) {
      this.unset("lendingPoolManager");
    } else {
      this.set("lendingPoolManager", Value.fromBytes(value as Bytes));
    }
  }

  get lendingPoolConfigurator(): Bytes | null {
    let value = this.get("lendingPoolConfigurator");
    if (value === null) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set lendingPoolConfigurator(value: Bytes | null) {
    if (value === null) {
      this.unset("lendingPoolConfigurator");
    } else {
      this.set("lendingPoolConfigurator", Value.fromBytes(value as Bytes));
    }
  }

  get lendingPoolLiquidationManager(): Bytes | null {
    let value = this.get("lendingPoolLiquidationManager");
    if (value === null) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set lendingPoolLiquidationManager(value: Bytes | null) {
    if (value === null) {
      this.unset("lendingPoolLiquidationManager");
    } else {
      this.set(
        "lendingPoolLiquidationManager",
        Value.fromBytes(value as Bytes)
      );
    }
  }

  get lendingPoolDataProvider(): Bytes | null {
    let value = this.get("lendingPoolDataProvider");
    if (value === null) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set lendingPoolDataProvider(value: Bytes | null) {
    if (value === null) {
      this.unset("lendingPoolDataProvider");
    } else {
      this.set("lendingPoolDataProvider", Value.fromBytes(value as Bytes));
    }
  }

  get proxyPriceProvider(): Bytes | null {
    let value = this.get("proxyPriceProvider");
    if (value === null) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set proxyPriceProvider(value: Bytes | null) {
    if (value === null) {
      this.unset("proxyPriceProvider");
    } else {
      this.set("proxyPriceProvider", Value.fromBytes(value as Bytes));
    }
  }

  get lendingRateOracle(): Bytes | null {
    let value = this.get("lendingRateOracle");
    if (value === null) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set lendingRateOracle(value: Bytes | null) {
    if (value === null) {
      this.unset("lendingRateOracle");
    } else {
      this.set("lendingRateOracle", Value.fromBytes(value as Bytes));
    }
  }

  get feeProvider(): Bytes | null {
    let value = this.get("feeProvider");
    if (value === null) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set feeProvider(value: Bytes | null) {
    if (value === null) {
      this.unset("feeProvider");
    } else {
      this.set("feeProvider", Value.fromBytes(value as Bytes));
    }
  }

  get history(): Array<string> {
    let value = this.get("history");
    return value.toStringArray();
  }

  set history(value: Array<string>) {
    this.set("history", Value.fromStringArray(value));
  }

  get lastUpdateTimestamp(): i32 {
    let value = this.get("lastUpdateTimestamp");
    return value.toI32();
  }

  set lastUpdateTimestamp(value: i32) {
    this.set("lastUpdateTimestamp", Value.fromI32(value));
  }

  get reserves(): Array<string> {
    let value = this.get("reserves");
    return value.toStringArray();
  }

  set reserves(value: Array<string>) {
    this.set("reserves", Value.fromStringArray(value));
  }

  get depositHistory(): Array<string> {
    let value = this.get("depositHistory");
    return value.toStringArray();
  }

  set depositHistory(value: Array<string>) {
    this.set("depositHistory", Value.fromStringArray(value));
  }

  get redeemUnderlyingHistory(): Array<string> {
    let value = this.get("redeemUnderlyingHistory");
    return value.toStringArray();
  }

  set redeemUnderlyingHistory(value: Array<string>) {
    this.set("redeemUnderlyingHistory", Value.fromStringArray(value));
  }

  get borrowHistory(): Array<string> {
    let value = this.get("borrowHistory");
    return value.toStringArray();
  }

  set borrowHistory(value: Array<string>) {
    this.set("borrowHistory", Value.fromStringArray(value));
  }

  get swapHistory(): Array<string> {
    let value = this.get("swapHistory");
    return value.toStringArray();
  }

  set swapHistory(value: Array<string>) {
    this.set("swapHistory", Value.fromStringArray(value));
  }

  get rebalanceStableBorrowRateHistory(): Array<string> {
    let value = this.get("rebalanceStableBorrowRateHistory");
    return value.toStringArray();
  }

  set rebalanceStableBorrowRateHistory(value: Array<string>) {
    this.set("rebalanceStableBorrowRateHistory", Value.fromStringArray(value));
  }

  get repayHistory(): Array<string> {
    let value = this.get("repayHistory");
    return value.toStringArray();
  }

  set repayHistory(value: Array<string>) {
    this.set("repayHistory", Value.fromStringArray(value));
  }

  get flashLoanHistory(): Array<string> {
    let value = this.get("flashLoanHistory");
    return value.toStringArray();
  }

  set flashLoanHistory(value: Array<string>) {
    this.set("flashLoanHistory", Value.fromStringArray(value));
  }

  get liquidationCallHistory(): Array<string> {
    let value = this.get("liquidationCallHistory");
    return value.toStringArray();
  }

  set liquidationCallHistory(value: Array<string>) {
    this.set("liquidationCallHistory", Value.fromStringArray(value));
  }

  get originationFeeLiquidationHistory(): Array<string> {
    let value = this.get("originationFeeLiquidationHistory");
    return value.toStringArray();
  }

  set originationFeeLiquidationHistory(value: Array<string>) {
    this.set("originationFeeLiquidationHistory", Value.fromStringArray(value));
  }
}

export class PriceHistoryItem extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save PriceHistoryItem entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save PriceHistoryItem entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("PriceHistoryItem", id.toString(), this);
  }

  static load(id: string): PriceHistoryItem | null {
    return store.get("PriceHistoryItem", id) as PriceHistoryItem | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get asset(): string {
    let value = this.get("asset");
    return value.toString();
  }

  set asset(value: string) {
    this.set("asset", Value.fromString(value));
  }

  get price(): BigDecimal {
    let value = this.get("price");
    return value.toBigDecimal();
  }

  set price(value: BigDecimal) {
    this.set("price", Value.fromBigDecimal(value));
  }

  get timestamp(): i32 {
    let value = this.get("timestamp");
    return value.toI32();
  }

  set timestamp(value: i32) {
    this.set("timestamp", Value.fromI32(value));
  }
}

export class UsdEthPriceHistoryItem extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save UsdEthPriceHistoryItem entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save UsdEthPriceHistoryItem entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("UsdEthPriceHistoryItem", id.toString(), this);
  }

  static load(id: string): UsdEthPriceHistoryItem | null {
    return store.get(
      "UsdEthPriceHistoryItem",
      id
    ) as UsdEthPriceHistoryItem | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get oracle(): string {
    let value = this.get("oracle");
    return value.toString();
  }

  set oracle(value: string) {
    this.set("oracle", Value.fromString(value));
  }

  get price(): BigDecimal {
    let value = this.get("price");
    return value.toBigDecimal();
  }

  set price(value: BigDecimal) {
    this.set("price", Value.fromBigDecimal(value));
  }

  get timestamp(): i32 {
    let value = this.get("timestamp");
    return value.toI32();
  }

  set timestamp(value: i32) {
    this.set("timestamp", Value.fromI32(value));
  }
}

export class ChainlinkAggregator extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save ChainlinkAggregator entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save ChainlinkAggregator entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("ChainlinkAggregator", id.toString(), this);
  }

  static load(id: string): ChainlinkAggregator | null {
    return store.get("ChainlinkAggregator", id) as ChainlinkAggregator | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get oracleAsset(): string {
    let value = this.get("oracleAsset");
    return value.toString();
  }

  set oracleAsset(value: string) {
    this.set("oracleAsset", Value.fromString(value));
  }
}

export class PriceOracleAsset extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save PriceOracleAsset entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save PriceOracleAsset entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("PriceOracleAsset", id.toString(), this);
  }

  static load(id: string): PriceOracleAsset | null {
    return store.get("PriceOracleAsset", id) as PriceOracleAsset | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get oracle(): string {
    let value = this.get("oracle");
    return value.toString();
  }

  set oracle(value: string) {
    this.set("oracle", Value.fromString(value));
  }

  get priceInEth(): BigDecimal {
    let value = this.get("priceInEth");
    return value.toBigDecimal();
  }

  set priceInEth(value: BigDecimal) {
    this.set("priceInEth", Value.fromBigDecimal(value));
  }

  get priceSource(): Bytes {
    let value = this.get("priceSource");
    return value.toBytes();
  }

  set priceSource(value: Bytes) {
    this.set("priceSource", Value.fromBytes(value));
  }

  get isFallbackRequired(): boolean {
    let value = this.get("isFallbackRequired");
    return value.toBoolean();
  }

  set isFallbackRequired(value: boolean) {
    this.set("isFallbackRequired", Value.fromBoolean(value));
  }

  get lastUpdateTimestamp(): i32 {
    let value = this.get("lastUpdateTimestamp");
    return value.toI32();
  }

  set lastUpdateTimestamp(value: i32) {
    this.set("lastUpdateTimestamp", Value.fromI32(value));
  }

  get priceHistory(): Array<string> {
    let value = this.get("priceHistory");
    return value.toStringArray();
  }

  set priceHistory(value: Array<string>) {
    this.set("priceHistory", Value.fromStringArray(value));
  }
}

export class PriceOracle extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save PriceOracle entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save PriceOracle entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("PriceOracle", id.toString(), this);
  }

  static load(id: string): PriceOracle | null {
    return store.get("PriceOracle", id) as PriceOracle | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get usdPriceEth(): BigDecimal {
    let value = this.get("usdPriceEth");
    return value.toBigDecimal();
  }

  set usdPriceEth(value: BigDecimal) {
    this.set("usdPriceEth", Value.fromBigDecimal(value));
  }

  get fallbackPriceOracle(): Bytes {
    let value = this.get("fallbackPriceOracle");
    return value.toBytes();
  }

  set fallbackPriceOracle(value: Bytes) {
    this.set("fallbackPriceOracle", Value.fromBytes(value));
  }

  get tokens(): Array<string> {
    let value = this.get("tokens");
    return value.toStringArray();
  }

  set tokens(value: Array<string>) {
    this.set("tokens", Value.fromStringArray(value));
  }

  get usdPriceEthHistory(): Array<string> {
    let value = this.get("usdPriceEthHistory");
    return value.toStringArray();
  }

  set usdPriceEthHistory(value: Array<string>) {
    this.set("usdPriceEthHistory", Value.fromStringArray(value));
  }

  get tokensWithFallback(): Array<string> {
    let value = this.get("tokensWithFallback");
    return value.toStringArray();
  }

  set tokensWithFallback(value: Array<string>) {
    this.set("tokensWithFallback", Value.fromStringArray(value));
  }

  get lastUpdateTimestamp(): i32 {
    let value = this.get("lastUpdateTimestamp");
    return value.toI32();
  }

  set lastUpdateTimestamp(value: i32) {
    this.set("lastUpdateTimestamp", Value.fromI32(value));
  }
}

export class AToken extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save AToken entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save AToken entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("AToken", id.toString(), this);
  }

  static load(id: string): AToken | null {
    return store.get("AToken", id) as AToken | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get underlyingAssetAddress(): Bytes {
    let value = this.get("underlyingAssetAddress");
    return value.toBytes();
  }

  set underlyingAssetAddress(value: Bytes) {
    this.set("underlyingAssetAddress", Value.fromBytes(value));
  }

  get underlyingAssetDecimals(): i32 {
    let value = this.get("underlyingAssetDecimals");
    return value.toI32();
  }

  set underlyingAssetDecimals(value: i32) {
    this.set("underlyingAssetDecimals", Value.fromI32(value));
  }
}

export class Referrer extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Referrer entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Referrer entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Referrer", id.toString(), this);
  }

  static load(id: string): Referrer | null {
    return store.get("Referrer", id) as Referrer | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get deposits(): Array<string> {
    let value = this.get("deposits");
    return value.toStringArray();
  }

  set deposits(value: Array<string>) {
    this.set("deposits", Value.fromStringArray(value));
  }

  get borrows(): Array<string> {
    let value = this.get("borrows");
    return value.toStringArray();
  }

  set borrows(value: Array<string>) {
    this.set("borrows", Value.fromStringArray(value));
  }
}

export class Deposit extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Deposit entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Deposit entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Deposit", id.toString(), this);
  }

  static load(id: string): Deposit | null {
    return store.get("Deposit", id) as Deposit | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get pool(): string {
    let value = this.get("pool");
    return value.toString();
  }

  set pool(value: string) {
    this.set("pool", Value.fromString(value));
  }

  get user(): string {
    let value = this.get("user");
    return value.toString();
  }

  set user(value: string) {
    this.set("user", Value.fromString(value));
  }

  get reserve(): string {
    let value = this.get("reserve");
    return value.toString();
  }

  set reserve(value: string) {
    this.set("reserve", Value.fromString(value));
  }

  get userReserve(): string {
    let value = this.get("userReserve");
    return value.toString();
  }

  set userReserve(value: string) {
    this.set("userReserve", Value.fromString(value));
  }

  get amount(): BigDecimal {
    let value = this.get("amount");
    return value.toBigDecimal();
  }

  set amount(value: BigDecimal) {
    this.set("amount", Value.fromBigDecimal(value));
  }

  get referrer(): string | null {
    let value = this.get("referrer");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set referrer(value: string | null) {
    if (value === null) {
      this.unset("referrer");
    } else {
      this.set("referrer", Value.fromString(value as string));
    }
  }

  get timestamp(): i32 {
    let value = this.get("timestamp");
    return value.toI32();
  }

  set timestamp(value: i32) {
    this.set("timestamp", Value.fromI32(value));
  }
}

export class RedeemUnderlying extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save RedeemUnderlying entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save RedeemUnderlying entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("RedeemUnderlying", id.toString(), this);
  }

  static load(id: string): RedeemUnderlying | null {
    return store.get("RedeemUnderlying", id) as RedeemUnderlying | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get pool(): string {
    let value = this.get("pool");
    return value.toString();
  }

  set pool(value: string) {
    this.set("pool", Value.fromString(value));
  }

  get user(): string {
    let value = this.get("user");
    return value.toString();
  }

  set user(value: string) {
    this.set("user", Value.fromString(value));
  }

  get reserve(): string {
    let value = this.get("reserve");
    return value.toString();
  }

  set reserve(value: string) {
    this.set("reserve", Value.fromString(value));
  }

  get userReserve(): string {
    let value = this.get("userReserve");
    return value.toString();
  }

  set userReserve(value: string) {
    this.set("userReserve", Value.fromString(value));
  }

  get amount(): BigDecimal {
    let value = this.get("amount");
    return value.toBigDecimal();
  }

  set amount(value: BigDecimal) {
    this.set("amount", Value.fromBigDecimal(value));
  }

  get timestamp(): i32 {
    let value = this.get("timestamp");
    return value.toI32();
  }

  set timestamp(value: i32) {
    this.set("timestamp", Value.fromI32(value));
  }
}

export class Borrow extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Borrow entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Borrow entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Borrow", id.toString(), this);
  }

  static load(id: string): Borrow | null {
    return store.get("Borrow", id) as Borrow | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get pool(): string {
    let value = this.get("pool");
    return value.toString();
  }

  set pool(value: string) {
    this.set("pool", Value.fromString(value));
  }

  get user(): string {
    let value = this.get("user");
    return value.toString();
  }

  set user(value: string) {
    this.set("user", Value.fromString(value));
  }

  get reserve(): string {
    let value = this.get("reserve");
    return value.toString();
  }

  set reserve(value: string) {
    this.set("reserve", Value.fromString(value));
  }

  get userReserve(): string {
    let value = this.get("userReserve");
    return value.toString();
  }

  set userReserve(value: string) {
    this.set("userReserve", Value.fromString(value));
  }

  get amount(): BigDecimal {
    let value = this.get("amount");
    return value.toBigDecimal();
  }

  set amount(value: BigDecimal) {
    this.set("amount", Value.fromBigDecimal(value));
  }

  get borrowRate(): BigDecimal {
    let value = this.get("borrowRate");
    return value.toBigDecimal();
  }

  set borrowRate(value: BigDecimal) {
    this.set("borrowRate", Value.fromBigDecimal(value));
  }

  get borrowRateMode(): string {
    let value = this.get("borrowRateMode");
    return value.toString();
  }

  set borrowRateMode(value: string) {
    this.set("borrowRateMode", Value.fromString(value));
  }

  get accruedBorrowInterest(): BigDecimal {
    let value = this.get("accruedBorrowInterest");
    return value.toBigDecimal();
  }

  set accruedBorrowInterest(value: BigDecimal) {
    this.set("accruedBorrowInterest", Value.fromBigDecimal(value));
  }

  get referrer(): string | null {
    let value = this.get("referrer");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set referrer(value: string | null) {
    if (value === null) {
      this.unset("referrer");
    } else {
      this.set("referrer", Value.fromString(value as string));
    }
  }

  get timestamp(): i32 {
    let value = this.get("timestamp");
    return value.toI32();
  }

  set timestamp(value: i32) {
    this.set("timestamp", Value.fromI32(value));
  }
}

export class Swap extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Swap entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Swap entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Swap", id.toString(), this);
  }

  static load(id: string): Swap | null {
    return store.get("Swap", id) as Swap | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get pool(): string {
    let value = this.get("pool");
    return value.toString();
  }

  set pool(value: string) {
    this.set("pool", Value.fromString(value));
  }

  get user(): string {
    let value = this.get("user");
    return value.toString();
  }

  set user(value: string) {
    this.set("user", Value.fromString(value));
  }

  get reserve(): string {
    let value = this.get("reserve");
    return value.toString();
  }

  set reserve(value: string) {
    this.set("reserve", Value.fromString(value));
  }

  get userReserve(): string {
    let value = this.get("userReserve");
    return value.toString();
  }

  set userReserve(value: string) {
    this.set("userReserve", Value.fromString(value));
  }

  get borrowRateFrom(): BigDecimal {
    let value = this.get("borrowRateFrom");
    return value.toBigDecimal();
  }

  set borrowRateFrom(value: BigDecimal) {
    this.set("borrowRateFrom", Value.fromBigDecimal(value));
  }

  get borrowRateModeFrom(): string {
    let value = this.get("borrowRateModeFrom");
    return value.toString();
  }

  set borrowRateModeFrom(value: string) {
    this.set("borrowRateModeFrom", Value.fromString(value));
  }

  get borrowRateTo(): BigDecimal {
    let value = this.get("borrowRateTo");
    return value.toBigDecimal();
  }

  set borrowRateTo(value: BigDecimal) {
    this.set("borrowRateTo", Value.fromBigDecimal(value));
  }

  get borrowRateModeTo(): string {
    let value = this.get("borrowRateModeTo");
    return value.toString();
  }

  set borrowRateModeTo(value: string) {
    this.set("borrowRateModeTo", Value.fromString(value));
  }

  get accruedBorrowInterest(): BigDecimal {
    let value = this.get("accruedBorrowInterest");
    return value.toBigDecimal();
  }

  set accruedBorrowInterest(value: BigDecimal) {
    this.set("accruedBorrowInterest", Value.fromBigDecimal(value));
  }

  get timestamp(): i32 {
    let value = this.get("timestamp");
    return value.toI32();
  }

  set timestamp(value: i32) {
    this.set("timestamp", Value.fromI32(value));
  }
}

export class RebalanceStableBorrowRate extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save RebalanceStableBorrowRate entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save RebalanceStableBorrowRate entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("RebalanceStableBorrowRate", id.toString(), this);
  }

  static load(id: string): RebalanceStableBorrowRate | null {
    return store.get(
      "RebalanceStableBorrowRate",
      id
    ) as RebalanceStableBorrowRate | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get pool(): string {
    let value = this.get("pool");
    return value.toString();
  }

  set pool(value: string) {
    this.set("pool", Value.fromString(value));
  }

  get user(): string {
    let value = this.get("user");
    return value.toString();
  }

  set user(value: string) {
    this.set("user", Value.fromString(value));
  }

  get reserve(): string {
    let value = this.get("reserve");
    return value.toString();
  }

  set reserve(value: string) {
    this.set("reserve", Value.fromString(value));
  }

  get userReserve(): string {
    let value = this.get("userReserve");
    return value.toString();
  }

  set userReserve(value: string) {
    this.set("userReserve", Value.fromString(value));
  }

  get borrowRateFrom(): BigDecimal {
    let value = this.get("borrowRateFrom");
    return value.toBigDecimal();
  }

  set borrowRateFrom(value: BigDecimal) {
    this.set("borrowRateFrom", Value.fromBigDecimal(value));
  }

  get borrowRateTo(): BigDecimal {
    let value = this.get("borrowRateTo");
    return value.toBigDecimal();
  }

  set borrowRateTo(value: BigDecimal) {
    this.set("borrowRateTo", Value.fromBigDecimal(value));
  }

  get accruedBorrowInterest(): BigDecimal {
    let value = this.get("accruedBorrowInterest");
    return value.toBigDecimal();
  }

  set accruedBorrowInterest(value: BigDecimal) {
    this.set("accruedBorrowInterest", Value.fromBigDecimal(value));
  }

  get timestamp(): i32 {
    let value = this.get("timestamp");
    return value.toI32();
  }

  set timestamp(value: i32) {
    this.set("timestamp", Value.fromI32(value));
  }
}

export class Repay extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Repay entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Repay entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Repay", id.toString(), this);
  }

  static load(id: string): Repay | null {
    return store.get("Repay", id) as Repay | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get pool(): string {
    let value = this.get("pool");
    return value.toString();
  }

  set pool(value: string) {
    this.set("pool", Value.fromString(value));
  }

  get user(): string {
    let value = this.get("user");
    return value.toString();
  }

  set user(value: string) {
    this.set("user", Value.fromString(value));
  }

  get reserve(): string {
    let value = this.get("reserve");
    return value.toString();
  }

  set reserve(value: string) {
    this.set("reserve", Value.fromString(value));
  }

  get userReserve(): string {
    let value = this.get("userReserve");
    return value.toString();
  }

  set userReserve(value: string) {
    this.set("userReserve", Value.fromString(value));
  }

  get amountAfterFee(): BigDecimal {
    let value = this.get("amountAfterFee");
    return value.toBigDecimal();
  }

  set amountAfterFee(value: BigDecimal) {
    this.set("amountAfterFee", Value.fromBigDecimal(value));
  }

  get fee(): BigDecimal {
    let value = this.get("fee");
    return value.toBigDecimal();
  }

  set fee(value: BigDecimal) {
    this.set("fee", Value.fromBigDecimal(value));
  }

  get timestamp(): i32 {
    let value = this.get("timestamp");
    return value.toI32();
  }

  set timestamp(value: i32) {
    this.set("timestamp", Value.fromI32(value));
  }
}

export class FlashLoan extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save FlashLoan entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save FlashLoan entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("FlashLoan", id.toString(), this);
  }

  static load(id: string): FlashLoan | null {
    return store.get("FlashLoan", id) as FlashLoan | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get pool(): string {
    let value = this.get("pool");
    return value.toString();
  }

  set pool(value: string) {
    this.set("pool", Value.fromString(value));
  }

  get reserve(): string {
    let value = this.get("reserve");
    return value.toString();
  }

  set reserve(value: string) {
    this.set("reserve", Value.fromString(value));
  }

  get target(): Bytes {
    let value = this.get("target");
    return value.toBytes();
  }

  set target(value: Bytes) {
    this.set("target", Value.fromBytes(value));
  }

  get amount(): BigDecimal {
    let value = this.get("amount");
    return value.toBigDecimal();
  }

  set amount(value: BigDecimal) {
    this.set("amount", Value.fromBigDecimal(value));
  }

  get totalFee(): BigDecimal {
    let value = this.get("totalFee");
    return value.toBigDecimal();
  }

  set totalFee(value: BigDecimal) {
    this.set("totalFee", Value.fromBigDecimal(value));
  }

  get protocolFee(): BigDecimal {
    let value = this.get("protocolFee");
    return value.toBigDecimal();
  }

  set protocolFee(value: BigDecimal) {
    this.set("protocolFee", Value.fromBigDecimal(value));
  }

  get timestamp(): i32 {
    let value = this.get("timestamp");
    return value.toI32();
  }

  set timestamp(value: i32) {
    this.set("timestamp", Value.fromI32(value));
  }
}

export class LiquidationCall extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save LiquidationCall entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save LiquidationCall entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("LiquidationCall", id.toString(), this);
  }

  static load(id: string): LiquidationCall | null {
    return store.get("LiquidationCall", id) as LiquidationCall | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get pool(): string {
    let value = this.get("pool");
    return value.toString();
  }

  set pool(value: string) {
    this.set("pool", Value.fromString(value));
  }

  get user(): string {
    let value = this.get("user");
    return value.toString();
  }

  set user(value: string) {
    this.set("user", Value.fromString(value));
  }

  get collateralReserve(): string {
    let value = this.get("collateralReserve");
    return value.toString();
  }

  set collateralReserve(value: string) {
    this.set("collateralReserve", Value.fromString(value));
  }

  get collateralUserReserve(): string {
    let value = this.get("collateralUserReserve");
    return value.toString();
  }

  set collateralUserReserve(value: string) {
    this.set("collateralUserReserve", Value.fromString(value));
  }

  get collateralAmount(): BigDecimal {
    let value = this.get("collateralAmount");
    return value.toBigDecimal();
  }

  set collateralAmount(value: BigDecimal) {
    this.set("collateralAmount", Value.fromBigDecimal(value));
  }

  get principalReserve(): string {
    let value = this.get("principalReserve");
    return value.toString();
  }

  set principalReserve(value: string) {
    this.set("principalReserve", Value.fromString(value));
  }

  get principalUserReserve(): string {
    let value = this.get("principalUserReserve");
    return value.toString();
  }

  set principalUserReserve(value: string) {
    this.set("principalUserReserve", Value.fromString(value));
  }

  get principalAmount(): BigDecimal {
    let value = this.get("principalAmount");
    return value.toBigDecimal();
  }

  set principalAmount(value: BigDecimal) {
    this.set("principalAmount", Value.fromBigDecimal(value));
  }

  get liquidator(): Bytes {
    let value = this.get("liquidator");
    return value.toBytes();
  }

  set liquidator(value: Bytes) {
    this.set("liquidator", Value.fromBytes(value));
  }

  get timestamp(): i32 {
    let value = this.get("timestamp");
    return value.toI32();
  }

  set timestamp(value: i32) {
    this.set("timestamp", Value.fromI32(value));
  }
}

export class OriginationFeeLiquidation extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save OriginationFeeLiquidation entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save OriginationFeeLiquidation entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("OriginationFeeLiquidation", id.toString(), this);
  }

  static load(id: string): OriginationFeeLiquidation | null {
    return store.get(
      "OriginationFeeLiquidation",
      id
    ) as OriginationFeeLiquidation | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get pool(): string {
    let value = this.get("pool");
    return value.toString();
  }

  set pool(value: string) {
    this.set("pool", Value.fromString(value));
  }

  get user(): string {
    let value = this.get("user");
    return value.toString();
  }

  set user(value: string) {
    this.set("user", Value.fromString(value));
  }

  get collateralReserve(): string {
    let value = this.get("collateralReserve");
    return value.toString();
  }

  set collateralReserve(value: string) {
    this.set("collateralReserve", Value.fromString(value));
  }

  get collateralUserReserve(): string {
    let value = this.get("collateralUserReserve");
    return value.toString();
  }

  set collateralUserReserve(value: string) {
    this.set("collateralUserReserve", Value.fromString(value));
  }

  get principalReserve(): string {
    let value = this.get("principalReserve");
    return value.toString();
  }

  set principalReserve(value: string) {
    this.set("principalReserve", Value.fromString(value));
  }

  get principalUserReserve(): string {
    let value = this.get("principalUserReserve");
    return value.toString();
  }

  set principalUserReserve(value: string) {
    this.set("principalUserReserve", Value.fromString(value));
  }

  get feeLiquidated(): BigDecimal {
    let value = this.get("feeLiquidated");
    return value.toBigDecimal();
  }

  set feeLiquidated(value: BigDecimal) {
    this.set("feeLiquidated", Value.fromBigDecimal(value));
  }

  get timestamp(): i32 {
    let value = this.get("timestamp");
    return value.toI32();
  }

  set timestamp(value: i32) {
    this.set("timestamp", Value.fromI32(value));
  }
}

export class ReserveConfigurationHistoryItem extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save ReserveConfigurationHistoryItem entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save ReserveConfigurationHistoryItem entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("ReserveConfigurationHistoryItem", id.toString(), this);
  }

  static load(id: string): ReserveConfigurationHistoryItem | null {
    return store.get(
      "ReserveConfigurationHistoryItem",
      id
    ) as ReserveConfigurationHistoryItem | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get reserve(): string {
    let value = this.get("reserve");
    return value.toString();
  }

  set reserve(value: string) {
    this.set("reserve", Value.fromString(value));
  }

  get usageAsCollateralEnabled(): boolean {
    let value = this.get("usageAsCollateralEnabled");
    return value.toBoolean();
  }

  set usageAsCollateralEnabled(value: boolean) {
    this.set("usageAsCollateralEnabled", Value.fromBoolean(value));
  }

  get borrowingEnabled(): boolean {
    let value = this.get("borrowingEnabled");
    return value.toBoolean();
  }

  set borrowingEnabled(value: boolean) {
    this.set("borrowingEnabled", Value.fromBoolean(value));
  }

  get stableBorrowRateEnabled(): boolean {
    let value = this.get("stableBorrowRateEnabled");
    return value.toBoolean();
  }

  set stableBorrowRateEnabled(value: boolean) {
    this.set("stableBorrowRateEnabled", Value.fromBoolean(value));
  }

  get isActive(): boolean {
    let value = this.get("isActive");
    return value.toBoolean();
  }

  set isActive(value: boolean) {
    this.set("isActive", Value.fromBoolean(value));
  }

  get reserveInterestRateStrategy(): Bytes {
    let value = this.get("reserveInterestRateStrategy");
    return value.toBytes();
  }

  set reserveInterestRateStrategy(value: Bytes) {
    this.set("reserveInterestRateStrategy", Value.fromBytes(value));
  }

  get baseLTVasCollateral(): BigDecimal {
    let value = this.get("baseLTVasCollateral");
    return value.toBigDecimal();
  }

  set baseLTVasCollateral(value: BigDecimal) {
    this.set("baseLTVasCollateral", Value.fromBigDecimal(value));
  }

  get reserveLiquidationThreshold(): BigDecimal {
    let value = this.get("reserveLiquidationThreshold");
    return value.toBigDecimal();
  }

  set reserveLiquidationThreshold(value: BigDecimal) {
    this.set("reserveLiquidationThreshold", Value.fromBigDecimal(value));
  }

  get reserveLiquidationBonus(): BigInt {
    let value = this.get("reserveLiquidationBonus");
    return value.toBigInt();
  }

  set reserveLiquidationBonus(value: BigInt) {
    this.set("reserveLiquidationBonus", Value.fromBigInt(value));
  }

  get timestamp(): i32 {
    let value = this.get("timestamp");
    return value.toI32();
  }

  set timestamp(value: i32) {
    this.set("timestamp", Value.fromI32(value));
  }
}

export class ReserveParamsHistoryItem extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save ReserveParamsHistoryItem entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save ReserveParamsHistoryItem entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("ReserveParamsHistoryItem", id.toString(), this);
  }

  static load(id: string): ReserveParamsHistoryItem | null {
    return store.get(
      "ReserveParamsHistoryItem",
      id
    ) as ReserveParamsHistoryItem | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get reserve(): string {
    let value = this.get("reserve");
    return value.toString();
  }

  set reserve(value: string) {
    this.set("reserve", Value.fromString(value));
  }

  get variableBorrowRate(): BigDecimal {
    let value = this.get("variableBorrowRate");
    return value.toBigDecimal();
  }

  set variableBorrowRate(value: BigDecimal) {
    this.set("variableBorrowRate", Value.fromBigDecimal(value));
  }

  get variableBorrowIndex(): BigDecimal {
    let value = this.get("variableBorrowIndex");
    return value.toBigDecimal();
  }

  set variableBorrowIndex(value: BigDecimal) {
    this.set("variableBorrowIndex", Value.fromBigDecimal(value));
  }

  get utilizationRate(): BigDecimal {
    let value = this.get("utilizationRate");
    return value.toBigDecimal();
  }

  set utilizationRate(value: BigDecimal) {
    this.set("utilizationRate", Value.fromBigDecimal(value));
  }

  get stableBorrowRate(): BigDecimal {
    let value = this.get("stableBorrowRate");
    return value.toBigDecimal();
  }

  set stableBorrowRate(value: BigDecimal) {
    this.set("stableBorrowRate", Value.fromBigDecimal(value));
  }

  get liquidityIndex(): BigDecimal {
    let value = this.get("liquidityIndex");
    return value.toBigDecimal();
  }

  set liquidityIndex(value: BigDecimal) {
    this.set("liquidityIndex", Value.fromBigDecimal(value));
  }

  get liquidityRate(): BigDecimal {
    let value = this.get("liquidityRate");
    return value.toBigDecimal();
  }

  set liquidityRate(value: BigDecimal) {
    this.set("liquidityRate", Value.fromBigDecimal(value));
  }

  get totalLiquidity(): BigDecimal {
    let value = this.get("totalLiquidity");
    return value.toBigDecimal();
  }

  set totalLiquidity(value: BigDecimal) {
    this.set("totalLiquidity", Value.fromBigDecimal(value));
  }

  get availableLiquidity(): BigDecimal {
    let value = this.get("availableLiquidity");
    return value.toBigDecimal();
  }

  set availableLiquidity(value: BigDecimal) {
    this.set("availableLiquidity", Value.fromBigDecimal(value));
  }

  get totalBorrows(): BigDecimal {
    let value = this.get("totalBorrows");
    return value.toBigDecimal();
  }

  set totalBorrows(value: BigDecimal) {
    this.set("totalBorrows", Value.fromBigDecimal(value));
  }

  get totalBorrowsVariable(): BigDecimal {
    let value = this.get("totalBorrowsVariable");
    return value.toBigDecimal();
  }

  set totalBorrowsVariable(value: BigDecimal) {
    this.set("totalBorrowsVariable", Value.fromBigDecimal(value));
  }

  get totalBorrowsStable(): BigDecimal {
    let value = this.get("totalBorrowsStable");
    return value.toBigDecimal();
  }

  set totalBorrowsStable(value: BigDecimal) {
    this.set("totalBorrowsStable", Value.fromBigDecimal(value));
  }

  get timestamp(): i32 {
    let value = this.get("timestamp");
    return value.toI32();
  }

  set timestamp(value: i32) {
    this.set("timestamp", Value.fromI32(value));
  }
}

export class Reserve extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Reserve entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Reserve entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Reserve", id.toString(), this);
  }

  static load(id: string): Reserve | null {
    return store.get("Reserve", id) as Reserve | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get pool(): string {
    let value = this.get("pool");
    return value.toString();
  }

  set pool(value: string) {
    this.set("pool", Value.fromString(value));
  }

  get symbol(): string {
    let value = this.get("symbol");
    return value.toString();
  }

  set symbol(value: string) {
    this.set("symbol", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get decimals(): i32 {
    let value = this.get("decimals");
    return value.toI32();
  }

  set decimals(value: i32) {
    this.set("decimals", Value.fromI32(value));
  }

  get usageAsCollateralEnabled(): boolean {
    let value = this.get("usageAsCollateralEnabled");
    return value.toBoolean();
  }

  set usageAsCollateralEnabled(value: boolean) {
    this.set("usageAsCollateralEnabled", Value.fromBoolean(value));
  }

  get borrowingEnabled(): boolean {
    let value = this.get("borrowingEnabled");
    return value.toBoolean();
  }

  set borrowingEnabled(value: boolean) {
    this.set("borrowingEnabled", Value.fromBoolean(value));
  }

  get stableBorrowRateEnabled(): boolean {
    let value = this.get("stableBorrowRateEnabled");
    return value.toBoolean();
  }

  set stableBorrowRateEnabled(value: boolean) {
    this.set("stableBorrowRateEnabled", Value.fromBoolean(value));
  }

  get isActive(): boolean {
    let value = this.get("isActive");
    return value.toBoolean();
  }

  set isActive(value: boolean) {
    this.set("isActive", Value.fromBoolean(value));
  }

  get price(): string {
    let value = this.get("price");
    return value.toString();
  }

  set price(value: string) {
    this.set("price", Value.fromString(value));
  }

  get reserveInterestRateStrategy(): Bytes {
    let value = this.get("reserveInterestRateStrategy");
    return value.toBytes();
  }

  set reserveInterestRateStrategy(value: Bytes) {
    this.set("reserveInterestRateStrategy", Value.fromBytes(value));
  }

  get baseLTVasCollateral(): BigDecimal {
    let value = this.get("baseLTVasCollateral");
    return value.toBigDecimal();
  }

  set baseLTVasCollateral(value: BigDecimal) {
    this.set("baseLTVasCollateral", Value.fromBigDecimal(value));
  }

  get reserveLiquidationThreshold(): BigDecimal {
    let value = this.get("reserveLiquidationThreshold");
    return value.toBigDecimal();
  }

  set reserveLiquidationThreshold(value: BigDecimal) {
    this.set("reserveLiquidationThreshold", Value.fromBigDecimal(value));
  }

  get reserveLiquidationBonus(): BigInt {
    let value = this.get("reserveLiquidationBonus");
    return value.toBigInt();
  }

  set reserveLiquidationBonus(value: BigInt) {
    this.set("reserveLiquidationBonus", Value.fromBigInt(value));
  }

  get utilizationRate(): BigDecimal {
    let value = this.get("utilizationRate");
    return value.toBigDecimal();
  }

  set utilizationRate(value: BigDecimal) {
    this.set("utilizationRate", Value.fromBigDecimal(value));
  }

  get totalLiquidity(): BigDecimal {
    let value = this.get("totalLiquidity");
    return value.toBigDecimal();
  }

  set totalLiquidity(value: BigDecimal) {
    this.set("totalLiquidity", Value.fromBigDecimal(value));
  }

  get availableLiquidity(): BigDecimal {
    let value = this.get("availableLiquidity");
    return value.toBigDecimal();
  }

  set availableLiquidity(value: BigDecimal) {
    this.set("availableLiquidity", Value.fromBigDecimal(value));
  }

  get totalBorrows(): BigDecimal {
    let value = this.get("totalBorrows");
    return value.toBigDecimal();
  }

  set totalBorrows(value: BigDecimal) {
    this.set("totalBorrows", Value.fromBigDecimal(value));
  }

  get totalBorrowsStable(): BigDecimal {
    let value = this.get("totalBorrowsStable");
    return value.toBigDecimal();
  }

  set totalBorrowsStable(value: BigDecimal) {
    this.set("totalBorrowsStable", Value.fromBigDecimal(value));
  }

  get totalBorrowsVariable(): BigDecimal {
    let value = this.get("totalBorrowsVariable");
    return value.toBigDecimal();
  }

  set totalBorrowsVariable(value: BigDecimal) {
    this.set("totalBorrowsVariable", Value.fromBigDecimal(value));
  }

  get liquidityRate(): BigDecimal {
    let value = this.get("liquidityRate");
    return value.toBigDecimal();
  }

  set liquidityRate(value: BigDecimal) {
    this.set("liquidityRate", Value.fromBigDecimal(value));
  }

  get variableBorrowRate(): BigDecimal {
    let value = this.get("variableBorrowRate");
    return value.toBigDecimal();
  }

  set variableBorrowRate(value: BigDecimal) {
    this.set("variableBorrowRate", Value.fromBigDecimal(value));
  }

  get stableBorrowRate(): BigDecimal {
    let value = this.get("stableBorrowRate");
    return value.toBigDecimal();
  }

  set stableBorrowRate(value: BigDecimal) {
    this.set("stableBorrowRate", Value.fromBigDecimal(value));
  }

  get liquidityIndex(): BigDecimal {
    let value = this.get("liquidityIndex");
    return value.toBigDecimal();
  }

  set liquidityIndex(value: BigDecimal) {
    this.set("liquidityIndex", Value.fromBigDecimal(value));
  }

  get variableBorrowIndex(): BigDecimal {
    let value = this.get("variableBorrowIndex");
    return value.toBigDecimal();
  }

  set variableBorrowIndex(value: BigDecimal) {
    this.set("variableBorrowIndex", Value.fromBigDecimal(value));
  }

  get aToken(): string {
    let value = this.get("aToken");
    return value.toString();
  }

  set aToken(value: string) {
    this.set("aToken", Value.fromString(value));
  }

  get lastUpdateTimestamp(): i32 {
    let value = this.get("lastUpdateTimestamp");
    return value.toI32();
  }

  set lastUpdateTimestamp(value: i32) {
    this.set("lastUpdateTimestamp", Value.fromI32(value));
  }

  get userReserves(): Array<string> {
    let value = this.get("userReserves");
    return value.toStringArray();
  }

  set userReserves(value: Array<string>) {
    this.set("userReserves", Value.fromStringArray(value));
  }

  get depositHistory(): Array<string> {
    let value = this.get("depositHistory");
    return value.toStringArray();
  }

  set depositHistory(value: Array<string>) {
    this.set("depositHistory", Value.fromStringArray(value));
  }

  get redeemUnderlyingHistory(): Array<string> {
    let value = this.get("redeemUnderlyingHistory");
    return value.toStringArray();
  }

  set redeemUnderlyingHistory(value: Array<string>) {
    this.set("redeemUnderlyingHistory", Value.fromStringArray(value));
  }

  get borrowHistory(): Array<string> {
    let value = this.get("borrowHistory");
    return value.toStringArray();
  }

  set borrowHistory(value: Array<string>) {
    this.set("borrowHistory", Value.fromStringArray(value));
  }

  get swapHistory(): Array<string> {
    let value = this.get("swapHistory");
    return value.toStringArray();
  }

  set swapHistory(value: Array<string>) {
    this.set("swapHistory", Value.fromStringArray(value));
  }

  get rebalanceStableBorrowRateHistory(): Array<string> {
    let value = this.get("rebalanceStableBorrowRateHistory");
    return value.toStringArray();
  }

  set rebalanceStableBorrowRateHistory(value: Array<string>) {
    this.set("rebalanceStableBorrowRateHistory", Value.fromStringArray(value));
  }

  get repayHistory(): Array<string> {
    let value = this.get("repayHistory");
    return value.toStringArray();
  }

  set repayHistory(value: Array<string>) {
    this.set("repayHistory", Value.fromStringArray(value));
  }

  get flashLoanHistory(): Array<string> {
    let value = this.get("flashLoanHistory");
    return value.toStringArray();
  }

  set flashLoanHistory(value: Array<string>) {
    this.set("flashLoanHistory", Value.fromStringArray(value));
  }

  get liquidationCallHistory(): Array<string> {
    let value = this.get("liquidationCallHistory");
    return value.toStringArray();
  }

  set liquidationCallHistory(value: Array<string>) {
    this.set("liquidationCallHistory", Value.fromStringArray(value));
  }

  get originationFeeLiquidationHistory(): Array<string> {
    let value = this.get("originationFeeLiquidationHistory");
    return value.toStringArray();
  }

  set originationFeeLiquidationHistory(value: Array<string>) {
    this.set("originationFeeLiquidationHistory", Value.fromStringArray(value));
  }

  get paramsHistory(): Array<string> {
    let value = this.get("paramsHistory");
    return value.toStringArray();
  }

  set paramsHistory(value: Array<string>) {
    this.set("paramsHistory", Value.fromStringArray(value));
  }

  get configurationHistory(): Array<string> {
    let value = this.get("configurationHistory");
    return value.toStringArray();
  }

  set configurationHistory(value: Array<string>) {
    this.set("configurationHistory", Value.fromStringArray(value));
  }

  get deposits(): Array<string> {
    let value = this.get("deposits");
    return value.toStringArray();
  }

  set deposits(value: Array<string>) {
    this.set("deposits", Value.fromStringArray(value));
  }
}

export class ATokenBalanceHistoryItem extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save ATokenBalanceHistoryItem entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save ATokenBalanceHistoryItem entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("ATokenBalanceHistoryItem", id.toString(), this);
  }

  static load(id: string): ATokenBalanceHistoryItem | null {
    return store.get(
      "ATokenBalanceHistoryItem",
      id
    ) as ATokenBalanceHistoryItem | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get userReserve(): string {
    let value = this.get("userReserve");
    return value.toString();
  }

  set userReserve(value: string) {
    this.set("userReserve", Value.fromString(value));
  }

  get balance(): BigDecimal {
    let value = this.get("balance");
    return value.toBigDecimal();
  }

  set balance(value: BigDecimal) {
    this.set("balance", Value.fromBigDecimal(value));
  }

  get userBalanceIndex(): BigDecimal {
    let value = this.get("userBalanceIndex");
    return value.toBigDecimal();
  }

  set userBalanceIndex(value: BigDecimal) {
    this.set("userBalanceIndex", Value.fromBigDecimal(value));
  }

  get interestRedirectionAddress(): Bytes {
    let value = this.get("interestRedirectionAddress");
    return value.toBytes();
  }

  set interestRedirectionAddress(value: Bytes) {
    this.set("interestRedirectionAddress", Value.fromBytes(value));
  }

  get redirectedBalance(): BigDecimal {
    let value = this.get("redirectedBalance");
    return value.toBigDecimal();
  }

  set redirectedBalance(value: BigDecimal) {
    this.set("redirectedBalance", Value.fromBigDecimal(value));
  }

  get timestamp(): i32 {
    let value = this.get("timestamp");
    return value.toI32();
  }

  set timestamp(value: i32) {
    this.set("timestamp", Value.fromI32(value));
  }
}

export class UserBorrowHistoryItem extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save UserBorrowHistoryItem entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save UserBorrowHistoryItem entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("UserBorrowHistoryItem", id.toString(), this);
  }

  static load(id: string): UserBorrowHistoryItem | null {
    return store.get(
      "UserBorrowHistoryItem",
      id
    ) as UserBorrowHistoryItem | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get userReserve(): string {
    let value = this.get("userReserve");
    return value.toString();
  }

  set userReserve(value: string) {
    this.set("userReserve", Value.fromString(value));
  }

  get totalBorrows(): BigDecimal {
    let value = this.get("totalBorrows");
    return value.toBigDecimal();
  }

  set totalBorrows(value: BigDecimal) {
    this.set("totalBorrows", Value.fromBigDecimal(value));
  }

  get borrowRate(): BigDecimal {
    let value = this.get("borrowRate");
    return value.toBigDecimal();
  }

  set borrowRate(value: BigDecimal) {
    this.set("borrowRate", Value.fromBigDecimal(value));
  }

  get borrowRateMode(): string {
    let value = this.get("borrowRateMode");
    return value.toString();
  }

  set borrowRateMode(value: string) {
    this.set("borrowRateMode", Value.fromString(value));
  }

  get originationFee(): BigDecimal {
    let value = this.get("originationFee");
    return value.toBigDecimal();
  }

  set originationFee(value: BigDecimal) {
    this.set("originationFee", Value.fromBigDecimal(value));
  }

  get timestamp(): i32 {
    let value = this.get("timestamp");
    return value.toI32();
  }

  set timestamp(value: i32) {
    this.set("timestamp", Value.fromI32(value));
  }
}

export class UserReserve extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save UserReserve entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save UserReserve entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("UserReserve", id.toString(), this);
  }

  static load(id: string): UserReserve | null {
    return store.get("UserReserve", id) as UserReserve | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get reserve(): string {
    let value = this.get("reserve");
    return value.toString();
  }

  set reserve(value: string) {
    this.set("reserve", Value.fromString(value));
  }

  get user(): string {
    let value = this.get("user");
    return value.toString();
  }

  set user(value: string) {
    this.set("user", Value.fromString(value));
  }

  get usageAsCollateralEnabledOnUser(): boolean {
    let value = this.get("usageAsCollateralEnabledOnUser");
    return value.toBoolean();
  }

  set usageAsCollateralEnabledOnUser(value: boolean) {
    this.set("usageAsCollateralEnabledOnUser", Value.fromBoolean(value));
  }

  get userBalanceIndex(): BigDecimal {
    let value = this.get("userBalanceIndex");
    return value.toBigDecimal();
  }

  set userBalanceIndex(value: BigDecimal) {
    this.set("userBalanceIndex", Value.fromBigDecimal(value));
  }

  get principalATokenBalance(): BigDecimal {
    let value = this.get("principalATokenBalance");
    return value.toBigDecimal();
  }

  set principalATokenBalance(value: BigDecimal) {
    this.set("principalATokenBalance", Value.fromBigDecimal(value));
  }

  get redirectedBalance(): BigDecimal {
    let value = this.get("redirectedBalance");
    return value.toBigDecimal();
  }

  set redirectedBalance(value: BigDecimal) {
    this.set("redirectedBalance", Value.fromBigDecimal(value));
  }

  get interestRedirectionAddress(): Bytes {
    let value = this.get("interestRedirectionAddress");
    return value.toBytes();
  }

  set interestRedirectionAddress(value: Bytes) {
    this.set("interestRedirectionAddress", Value.fromBytes(value));
  }

  get interestRedirectionAllowance(): Bytes {
    let value = this.get("interestRedirectionAllowance");
    return value.toBytes();
  }

  set interestRedirectionAllowance(value: Bytes) {
    this.set("interestRedirectionAllowance", Value.fromBytes(value));
  }

  get principalBorrows(): BigDecimal {
    let value = this.get("principalBorrows");
    return value.toBigDecimal();
  }

  set principalBorrows(value: BigDecimal) {
    this.set("principalBorrows", Value.fromBigDecimal(value));
  }

  get borrowRate(): BigDecimal {
    let value = this.get("borrowRate");
    return value.toBigDecimal();
  }

  set borrowRate(value: BigDecimal) {
    this.set("borrowRate", Value.fromBigDecimal(value));
  }

  get borrowRateMode(): string {
    let value = this.get("borrowRateMode");
    return value.toString();
  }

  set borrowRateMode(value: string) {
    this.set("borrowRateMode", Value.fromString(value));
  }

  get variableBorrowIndex(): BigDecimal {
    let value = this.get("variableBorrowIndex");
    return value.toBigDecimal();
  }

  set variableBorrowIndex(value: BigDecimal) {
    this.set("variableBorrowIndex", Value.fromBigDecimal(value));
  }

  get originationFee(): BigDecimal {
    let value = this.get("originationFee");
    return value.toBigDecimal();
  }

  set originationFee(value: BigDecimal) {
    this.set("originationFee", Value.fromBigDecimal(value));
  }

  get lastUpdateTimestamp(): i32 {
    let value = this.get("lastUpdateTimestamp");
    return value.toI32();
  }

  set lastUpdateTimestamp(value: i32) {
    this.set("lastUpdateTimestamp", Value.fromI32(value));
  }

  get aTokenBalanceHistory(): Array<string> {
    let value = this.get("aTokenBalanceHistory");
    return value.toStringArray();
  }

  set aTokenBalanceHistory(value: Array<string>) {
    this.set("aTokenBalanceHistory", Value.fromStringArray(value));
  }

  get borrowStateHistory(): Array<string> {
    let value = this.get("borrowStateHistory");
    return value.toStringArray();
  }

  set borrowStateHistory(value: Array<string>) {
    this.set("borrowStateHistory", Value.fromStringArray(value));
  }

  get depositHistory(): Array<string> {
    let value = this.get("depositHistory");
    return value.toStringArray();
  }

  set depositHistory(value: Array<string>) {
    this.set("depositHistory", Value.fromStringArray(value));
  }

  get redeemUnderlyingHistory(): Array<string> {
    let value = this.get("redeemUnderlyingHistory");
    return value.toStringArray();
  }

  set redeemUnderlyingHistory(value: Array<string>) {
    this.set("redeemUnderlyingHistory", Value.fromStringArray(value));
  }

  get borrowHistory(): Array<string> {
    let value = this.get("borrowHistory");
    return value.toStringArray();
  }

  set borrowHistory(value: Array<string>) {
    this.set("borrowHistory", Value.fromStringArray(value));
  }

  get swapHistory(): Array<string> {
    let value = this.get("swapHistory");
    return value.toStringArray();
  }

  set swapHistory(value: Array<string>) {
    this.set("swapHistory", Value.fromStringArray(value));
  }

  get rebalanceStableBorrowRateHistory(): Array<string> {
    let value = this.get("rebalanceStableBorrowRateHistory");
    return value.toStringArray();
  }

  set rebalanceStableBorrowRateHistory(value: Array<string>) {
    this.set("rebalanceStableBorrowRateHistory", Value.fromStringArray(value));
  }

  get repayHistory(): Array<string> {
    let value = this.get("repayHistory");
    return value.toStringArray();
  }

  set repayHistory(value: Array<string>) {
    this.set("repayHistory", Value.fromStringArray(value));
  }

  get liquidationCallHistory(): Array<string> {
    let value = this.get("liquidationCallHistory");
    return value.toStringArray();
  }

  set liquidationCallHistory(value: Array<string>) {
    this.set("liquidationCallHistory", Value.fromStringArray(value));
  }

  get originationFeeLiquidationHistory(): Array<string> {
    let value = this.get("originationFeeLiquidationHistory");
    return value.toStringArray();
  }

  set originationFeeLiquidationHistory(value: Array<string>) {
    this.set("originationFeeLiquidationHistory", Value.fromStringArray(value));
  }
}

export class User extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save User entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save User entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("User", id.toString(), this);
  }

  static load(id: string): User | null {
    return store.get("User", id) as User | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get reserves(): Array<string> {
    let value = this.get("reserves");
    return value.toStringArray();
  }

  set reserves(value: Array<string>) {
    this.set("reserves", Value.fromStringArray(value));
  }

  get depositHistory(): Array<string> {
    let value = this.get("depositHistory");
    return value.toStringArray();
  }

  set depositHistory(value: Array<string>) {
    this.set("depositHistory", Value.fromStringArray(value));
  }

  get redeemUnderlyingHistory(): Array<string> {
    let value = this.get("redeemUnderlyingHistory");
    return value.toStringArray();
  }

  set redeemUnderlyingHistory(value: Array<string>) {
    this.set("redeemUnderlyingHistory", Value.fromStringArray(value));
  }

  get borrowHistory(): Array<string> {
    let value = this.get("borrowHistory");
    return value.toStringArray();
  }

  set borrowHistory(value: Array<string>) {
    this.set("borrowHistory", Value.fromStringArray(value));
  }

  get swapHistory(): Array<string> {
    let value = this.get("swapHistory");
    return value.toStringArray();
  }

  set swapHistory(value: Array<string>) {
    this.set("swapHistory", Value.fromStringArray(value));
  }

  get rebalanceStableBorrowRateHistory(): Array<string> {
    let value = this.get("rebalanceStableBorrowRateHistory");
    return value.toStringArray();
  }

  set rebalanceStableBorrowRateHistory(value: Array<string>) {
    this.set("rebalanceStableBorrowRateHistory", Value.fromStringArray(value));
  }

  get repayHistory(): Array<string> {
    let value = this.get("repayHistory");
    return value.toStringArray();
  }

  set repayHistory(value: Array<string>) {
    this.set("repayHistory", Value.fromStringArray(value));
  }

  get liquidationCallHistory(): Array<string> {
    let value = this.get("liquidationCallHistory");
    return value.toStringArray();
  }

  set liquidationCallHistory(value: Array<string>) {
    this.set("liquidationCallHistory", Value.fromStringArray(value));
  }

  get originationFeeLiquidationHistory(): Array<string> {
    let value = this.get("originationFeeLiquidationHistory");
    return value.toStringArray();
  }

  set originationFeeLiquidationHistory(value: Array<string>) {
    this.set("originationFeeLiquidationHistory", Value.fromStringArray(value));
  }
}
